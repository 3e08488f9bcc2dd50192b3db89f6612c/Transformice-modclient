<Application
	x:Class="Transformice.tfmStandalone.App" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:Transformice.tfmStandalone" xmlns:system="clr-namespace:System;assembly=mscorlib">
	<Application.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary
					Source="/Resources/Themes/Dark.xaml" />
			</ResourceDictionary.MergedDictionaries>
			<FontFamily
				x:Key="Aspergit">pack://application:,,,/Resources/Fonts/#Aspergit</FontFamily>
			<Style
				TargetType="{x:Type local:PinnableWindow}"
				x:Key="PinnableWindowStyle">
				<Setter
					Property="FrameworkElement.UseLayoutRounding"
					Value="True" />
				<Setter
					Property="Background"
					Value="#00FFFFFF" />
				<Setter
					Property="FontFamily"
					Value="{DynamicResource DefaultFontFamily}" />
				<Setter
					Property="FontSize"
					Value="{DynamicResource DefaultFontSize}" />
				<Setter
					Property="Foreground"
					Value="{DynamicResource DefaultForegroundColorBrush}" />
				<Setter
					Property="Window.WindowStyle"
					Value="None" />
				<Setter
					Property="Window.AllowsTransparency"
					Value="True" />
				<Setter
					Property="Window.ResizeMode"
					Value="CanResizeWithGrip" />
				<Setter
					Property="Window.ShowInTaskbar"
					Value="{Binding CanMinimize}" />
				<Setter
					Property="MinWidth"
					Value="300" />
				<Setter
					Property="MinHeight"
					Value="120" />
				<Setter
					Property="WindowChrome.WindowChrome">
					<Setter.Value>
						<WindowChrome
							CornerRadius="{DynamicResource WindowCornerRadius}"
							GlassFrameThickness="1"
							ResizeBorderThickness="2"
							UseAeroCaptionButtons="False"
							CaptionHeight="0" />
					</Setter.Value>
				</Setter>
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type local:PinnableWindow}">
							<Border
								Name="BufferBorder"
								BorderBrush="#00FFFFFF">
								<Border
									Name="OuterBorder"
									BorderBrush="{DynamicResource WindowOuterBorderColor}"
									BorderThickness="{DynamicResource WindowOuterBorderThickness}"
									Background="{DynamicResource WindowBackgroundColor}"
									CornerRadius="{DynamicResource WindowCornerRadius}">
									<Border
										Name="InnerBorder"
										BorderBrush="{DynamicResource WindowInnerBorderColor}"
										BorderThickness="{DynamicResource WindowInnerBorderThickness}"
										Background="{DynamicResource WindowBackgroundColor}"
										CornerRadius="{DynamicResource WindowCornerRadius}">
										<DockPanel
											Name="WindowContent">
											<Border
												DockPanel.Dock="Top"
												BorderThickness="{DynamicResource WindowHeaderOuterBorderThickness}"
												BorderBrush="{DynamicResource WindowHeaderOuterBorderColor}"
												Margin="{DynamicResource WindowHeaderMargin}"
												SnapsToDevicePixels="True">
												<Border
													BorderThickness="{DynamicResource WindowHeaderInnerBorderThickness}"
													BorderBrush="{DynamicResource WindowHeaderInnerBorderColor}">
													<Grid>
														<FrameworkElement.Resources>
															<ResourceDictionary>
																<Style
																	TargetType="{x:Type Border}"
																	x:Key="{x:Type Border}">
																	<Setter
																		Property="Background"
																		Value="#00FFFFFF" />
																	<Style.Triggers>
																		<Trigger
																			Property="UIElement.IsMouseOver"
																			Value="True">
																			<Setter
																				Property="Background"
																				Value="{DynamicResource WindowHeaderButtonHoverBackgroundColor}" />
																		</Trigger>
																	</Style.Triggers>
																</Style>
															</ResourceDictionary>
														</FrameworkElement.Resources>
														<Label
															Name="TitleLabel"
															HorizontalAlignment="Stretch"
															HorizontalContentAlignment="Center"
															Foreground="{DynamicResource DefaultForegroundColorBrush}"
															FontFamily="{DynamicResource WindowTitleFontFamily}"
															FontSize="{DynamicResource WindowTitleFontSize}"
															SnapsToDevicePixels="False"
															Content="{TemplateBinding Title}" />
														<Border
															Name="PinButton"
															HorizontalAlignment="Left"
															Width="34"
															Visibility="Collapsed">
															<Canvas
																Margin="0,2,0,0"
																Width="13"
																Height="7"
																HorizontalAlignment="Center"
																VerticalAlignment="Center">
																<Line
																	X1="0"
																	Y1="6"
																	X2="6"
																	Y2="0"
																	StrokeThickness="1"
																	Stroke="{DynamicResource WindowHeaderButtonPenColor}" />
																<Line
																	X1="6"
																	Y1="0"
																	X2="12"
																	Y2="6"
																	StrokeThickness="1"
																	Stroke="{DynamicResource WindowHeaderButtonPenColor}" />
															</Canvas>
														</Border>
														<Border
															Name="UnpinButton"
															HorizontalAlignment="Left"
															Width="34"
															Visibility="Collapsed">
															<Canvas
																Margin="0,2,0,0"
																Width="13"
																Height="7"
																HorizontalAlignment="Center"
																VerticalAlignment="Center">
																<Line
																	X1="0"
																	Y1="0"
																	X2="6"
																	Y2="6"
																	StrokeThickness="1"
																	Stroke="{DynamicResource WindowHeaderButtonPenColor}" />
																<Line
																	X1="6"
																	Y1="6"
																	X2="12"
																	Y2="0"
																	StrokeThickness="1"
																	Stroke="{DynamicResource WindowHeaderButtonPenColor}" />
															</Canvas>
														</Border>
														<StackPanel
															Orientation="Horizontal"
															HorizontalAlignment="Right"
															SnapsToDevicePixels="True">
															<Border
																Name="MinimizeButton"
																VerticalAlignment="Stretch"
																Width="34">
																<Canvas
																	Width="20"
																	Height="14"
																	HorizontalAlignment="Center"
																	VerticalAlignment="Center">
																	<Line
																		X1="5"
																		Y1="12"
																		X2="14"
																		Y2="12"
																		StrokeThickness="1"
																		Stroke="{DynamicResource WindowHeaderButtonPenColor}" />
																</Canvas>
															</Border>
															<Border
																Name="MaximizeButton"
																VerticalAlignment="Stretch"
																Width="34"
																Visibility="Collapsed">
																<Canvas
																	Width="20"
																	Height="14"
																	HorizontalAlignment="Center"
																	VerticalAlignment="Center">
																	<Rectangle
																		Canvas.Left="5"
																		Canvas.Top="2"
																		Height="10"
																		Width="10"
																		Stroke="{DynamicResource WindowHeaderButtonPenColor}" />
																</Canvas>
															</Border>
															<Border
																Name="RestoreButton"
																VerticalAlignment="Stretch"
																Width="34"
																Visibility="Collapsed">
																<Canvas
																	Width="20"
																	Height="14"
																	HorizontalAlignment="Center"
																	VerticalAlignment="Center">
																	<Rectangle
																		Canvas.Left="5"
																		Canvas.Top="4"
																		Height="8"
																		Width="8"
																		Stroke="{DynamicResource WindowHeaderButtonPenColor}" />
																	<Line
																		X1="7"
																		Y1="4"
																		X2="7"
																		Y2="3"
																		StrokeThickness="1"
																		Stroke="{DynamicResource WindowHeaderButtonPenColor}" />
																	<Line
																		X1="7"
																		Y1="3"
																		X2="15"
																		Y2="3"
																		StrokeThickness="1"
																		Stroke="{DynamicResource WindowHeaderButtonPenColor}" />
																	<Line
																		X1="14"
																		Y1="3"
																		X2="14"
																		Y2="10"
																		StrokeThickness="1"
																		Stroke="{DynamicResource WindowHeaderButtonPenColor}" />
																	<Line
																		X1="14"
																		Y1="10"
																		X2="12"
																		Y2="10"
																		StrokeThickness="1"
																		Stroke="{DynamicResource WindowHeaderButtonPenColor}" />
																</Canvas>
															</Border>
															<Border
																Name="CloseButton"
																VerticalAlignment="Stretch"
																Width="34">
																<Canvas
																	Width="20"
																	Height="14"
																	HorizontalAlignment="Center"
																	VerticalAlignment="Center">
																	<Line
																		X1="5"
																		Y1="2"
																		X2="14"
																		Y2="11"
																		StrokeThickness="1"
																		Stroke="{DynamicResource WindowHeaderButtonPenColor}" />
																	<Line
																		X1="5"
																		Y1="11"
																		X2="14"
																		Y2="2"
																		StrokeThickness="1"
																		Stroke="{DynamicResource WindowHeaderButtonPenColor}" />
																</Canvas>
															</Border>
														</StackPanel>
													</Grid>
												</Border>
											</Border>
											<ContentPresenter />
										</DockPanel>
									</Border>
								</Border>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger
									Property="Window.WindowState"
									Value="Maximized">
									<Setter
										TargetName="BufferBorder"
										Property="BorderThickness"
										Value="6" />
									<Setter
										TargetName="OuterBorder"
										Property="Border.CornerRadius"
										Value="0" />
									<Setter
										TargetName="InnerBorder"
										Property="Border.CornerRadius"
										Value="0" />
									<Setter
										TargetName="RestoreButton"
										Property="Visibility"
										Value="Visible" />
								</Trigger>
								<Trigger
									Property="local:PinnableWindow.CanMinimize"
									Value="False">
									<Setter
										TargetName="MinimizeButton"
										Property="Visibility"
										Value="Collapsed" />
								</Trigger>
								<Trigger
									Property="local:PinnableWindow.CanClose"
									Value="False">
									<Setter
										TargetName="CloseButton"
										Property="Visibility"
										Value="Collapsed" />
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition
											Property="local:PinnableWindow.CanMaximize"
											Value="True" />
										<Condition
											Property="Window.WindowState"
											Value="Normal" />
									</MultiTrigger.Conditions>
									<MultiTrigger.Setters>
										<Setter
											TargetName="MaximizeButton"
											Property="Visibility"
											Value="Visible" />
									</MultiTrigger.Setters>
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition
											Property="local:PinnableWindow.CanMaximize"
											Value="True" />
										<Condition
											Property="Window.WindowState"
											Value="Maximized" />
									</MultiTrigger.Conditions>
									<MultiTrigger.Setters>
										<Setter
											TargetName="RestoreButton"
											Property="Visibility"
											Value="Visible" />
									</MultiTrigger.Setters>
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition
											Property="local:PinnableWindow.CanPin"
											Value="True" />
										<Condition
											Property="Window.Topmost"
											Value="False" />
									</MultiTrigger.Conditions>
									<MultiTrigger.Setters>
										<Setter
											TargetName="PinButton"
											Property="Visibility"
											Value="Visible" />
									</MultiTrigger.Setters>
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition
											Property="local:PinnableWindow.CanPin"
											Value="True" />
										<Condition
											Property="Window.Topmost"
											Value="True" />
									</MultiTrigger.Conditions>
									<MultiTrigger.Setters>
										<Setter
											TargetName="UnpinButton"
											Property="Visibility"
											Value="Visible" />
									</MultiTrigger.Setters>
								</MultiTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type Button}"
				x:Key="HyperlinkButtonStyle">
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type Button}">
							<ContentPresenter />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter
					Property="Foreground"
					Value="{DynamicResource HyperlinkButtonForegroundColor}" />
				<Setter
					Property="FontFamily"
					Value="{DynamicResource HyperlinkButtonFontFamily}" />
				<Setter
					Property="FontSize"
					Value="{DynamicResource HyperlinkButtonFontSize}" />
				<Setter
					Property="FrameworkElement.Cursor"
					Value="Hand" />
				<Style.Triggers>
					<Trigger
						Property="UIElement.IsMouseOver"
						Value="True">
						<Setter
							Property="Foreground"
							Value="{DynamicResource HyperlinkButtonForegroundHoverColor}" />
						<Setter
							Property="Template">
							<Setter.Value>
								<ControlTemplate
									TargetType="{x:Type Button}">
									<FrameworkTemplate.Resources>
										<ResourceDictionary>
											<Style
												TargetType="{x:Type TextBlock}"
												x:Key="{x:Type TextBlock}">
												<Setter
													Property="TextDecorations"
													Value="Underline" />
											</Style>
										</ResourceDictionary>
									</FrameworkTemplate.Resources>
									<ContentPresenter />
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>
			<Style
				TargetType="{x:Type Button}"
				x:Key="{x:Type Button}">
				<Setter
					Property="Foreground"
					Value="{DynamicResource ButtonForegroundColor}" />
				<Setter
					Property="FontFamily"
					Value="{DynamicResource ButtonFontFamily}" />
				<Setter
					Property="FontSize"
					Value="{DynamicResource ButtonFontSize}" />
				<Setter
					Property="FrameworkElement.Cursor"
					Value="{DynamicResource ButtonCursor}" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type Button}">
							<Border
								Name="border"
								BorderBrush="{DynamicResource ButtonOuterBorderColor}"
								BorderThickness="{DynamicResource ButtonOuterBorderThickness}"
								Background="{DynamicResource ButtonBackgroundColor}"
								CornerRadius="{DynamicResource ButtonCornerRadius}"
								SnapsToDevicePixels="True">
								<Border
									Name="innerBorder"
									BorderBrush="{DynamicResource ButtonInnerBorderColor}"
									BorderThickness="{DynamicResource ButtonOuterInnerThickness}"
									Background="{DynamicResource ButtonBackgroundColor}"
									CornerRadius="{DynamicResource ButtonCornerRadius}">
									<ContentPresenter
										Name="contentPresenter"
										ContentTemplate="{TemplateBinding ContentTemplate}"
										Content="{TemplateBinding Content}"
										ContentStringFormat="{TemplateBinding ContentStringFormat}"
										Focusable="False"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										Margin="{TemplateBinding Padding}"
										RecognizesAccessKey="True"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
								</Border>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger
									Property="UIElement.IsMouseOver"
									Value="True">
									<Setter
										Value="{DynamicResource ButtonForegroundHoverColor}"
										Property="Foreground" />
								</Trigger>
								<Trigger
									Property="IsPressed"
									Value="True">
									<Setter
										TargetName="border"
										Value="{DynamicResource ButtonOuterBorderPressedColor}"
										Property="BorderBrush" />
									<Setter
										TargetName="border"
										Value="{DynamicResource ButtonBackgroundPressedColor}"
										Property="Background" />
									<Setter
										TargetName="innerBorder"
										Value="{DynamicResource ButtonInnerBorderPressedColor}"
										Property="BorderBrush" />
									<Setter
										TargetName="innerBorder"
										Value="{DynamicResource ButtonBackgroundPressedColor}"
										Property="Background" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type local:ImageButton}"
				x:Key="{x:Type local:ImageButton}">
				<Setter
					Property="Foreground"
					Value="{DynamicResource ButtonForegroundColor}" />
				<Setter
					Property="FontFamily"
					Value="{DynamicResource ButtonFontFamily}" />
				<Setter
					Property="FontSize"
					Value="{DynamicResource ButtonFontSize}" />
				<Setter
					Property="FrameworkElement.Cursor"
					Value="{DynamicResource ButtonCursor}" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type local:ImageButton}">
							<Border
								Name="border"
								BorderBrush="{DynamicResource ButtonOuterBorderColor}"
								BorderThickness="{DynamicResource ButtonOuterBorderThickness}"
								Background="{DynamicResource ButtonBackgroundColor}"
								CornerRadius="{DynamicResource ButtonCornerRadius}"
								SnapsToDevicePixels="True">
								<Border
									Name="innerBorder"
									BorderBrush="{DynamicResource ButtonInnerBorderColor}"
									BorderThickness="{DynamicResource ButtonOuterInnerThickness}"
									Background="{DynamicResource ButtonBackgroundColor}"
									CornerRadius="{DynamicResource ButtonCornerRadius}">
									<Grid
										Margin="{TemplateBinding Padding}"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
										<Grid.ColumnDefinitions>
											<ColumnDefinition
												Width="Auto" />
											<ColumnDefinition />
										</Grid.ColumnDefinitions>
										<Image
											Name="Image"
											Grid.Column="0"
											Source="{TemplateBinding local:Image}"
											Width="{TemplateBinding local:ImageWidth}"
											Height="{TemplateBinding local:ImageHeight}"
											HorizontalAlignment="Center"
											VerticalAlignment="Center" />
										<ContentPresenter
											Name="contentPresenter"
											Grid.Column="1"
											ContentTemplate="{TemplateBinding ContentTemplate}"
											Content="{TemplateBinding Content}"
											ContentStringFormat="{TemplateBinding ContentStringFormat}"
											Focusable="False"
											RecognizesAccessKey="True"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
									</Grid>
								</Border>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger
									Property="UIElement.IsMouseOver"
									Value="True">
									<Setter
										Value="{DynamicResource ButtonForegroundHoverColor}"
										Property="Foreground" />
									<Setter
										TargetName="Image"
										Property="Source"
										Value="{Binding Path=ImageHover, RelativeSource={RelativeSource TemplatedParent}}" />
								</Trigger>
								<Trigger
									Property="IsPressed"
									Value="True">
									<Setter
										TargetName="border"
										Value="{DynamicResource ButtonOuterBorderPressedColor}"
										Property="BorderBrush" />
									<Setter
										TargetName="border"
										Value="{DynamicResource ButtonBackgroundPressedColor}"
										Property="Background" />
									<Setter
										TargetName="innerBorder"
										Value="{DynamicResource ButtonInnerBorderPressedColor}"
										Property="BorderBrush" />
									<Setter
										TargetName="innerBorder"
										Value="{DynamicResource ButtonBackgroundPressedColor}"
										Property="Background" />
									<Setter
										TargetName="Image"
										Property="Source"
										Value="{Binding Path=ImagePressed, RelativeSource={RelativeSource TemplatedParent}}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type CheckBox}"
				x:Key="PushButtonStyle">
				<Setter
					Property="Foreground"
					Value="{DynamicResource PushButtonForegroundColor}" />
				<Setter
					Property="FontFamily"
					Value="{DynamicResource PushButtonFontFamily}" />
				<Setter
					Property="FontSize"
					Value="{DynamicResource PushButtonFontSize}" />
				<Setter
					Property="FrameworkElement.Cursor"
					Value="{DynamicResource PushButtonCursor}" />
				<Setter
					Property="HorizontalContentAlignment"
					Value="Center" />
				<Setter
					Property="VerticalContentAlignment"
					Value="Center" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type CheckBox}">
							<Border
								Name="border"
								BorderBrush="{DynamicResource PushButtonOuterBorderColor}"
								BorderThickness="{DynamicResource PushButtonOuterBorderThickness}"
								Background="{DynamicResource PushButtonBackgroundColor}"
								CornerRadius="{DynamicResource PushButtonCornerRadius}"
								SnapsToDevicePixels="True">
								<Border
									Name="innerBorder"
									BorderBrush="{DynamicResource PushButtonInnerBorderColor}"
									BorderThickness="{DynamicResource PushButtonInnerBorderThickness}"
									Background="{DynamicResource PushButtonBackgroundColor}"
									CornerRadius="{DynamicResource PushButtonCornerRadius}">
									<ContentPresenter
										Name="contentPresenter"
										ContentTemplate="{TemplateBinding ContentTemplate}"
										Content="{TemplateBinding Content}"
										ContentStringFormat="{TemplateBinding ContentStringFormat}"
										Focusable="False"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										Margin="{TemplateBinding Padding}"
										RecognizesAccessKey="True"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
								</Border>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger
									Property="ToggleButton.IsChecked"
									Value="True">
									<Setter
										TargetName="border"
										Value="{DynamicResource PushButtonOuterBorderPressedColor}"
										Property="BorderBrush" />
									<Setter
										TargetName="border"
										Value="{DynamicResource PushButtonBackgroundPressedColor}"
										Property="Background" />
									<Setter
										TargetName="border"
										Value="{DynamicResource PushButtonOuterBorderPressedThickness}"
										Property="BorderThickness" />
									<Setter
										TargetName="innerBorder"
										Value="{DynamicResource PushButtonInnerBorderPressedColor}"
										Property="BorderBrush" />
									<Setter
										TargetName="innerBorder"
										Value="{DynamicResource PushButtonBackgroundPressedColor}"
										Property="Background" />
									<Setter
										TargetName="innerBorder"
										Value="{DynamicResource PushButtonInnerBorderPressedThickness}"
										Property="BorderThickness" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type TextBox}"
				x:Key="{x:Type TextBox}">
				<Setter
					Property="Foreground"
					Value="{DynamicResource TextBoxForegroundColor}" />
				<Setter
					Property="TextBoxBase.CaretBrush"
					Value="{DynamicResource TextBoxCaretColor}" />
				<Setter
					Property="TextBoxBase.SelectionBrush"
					Value="{DynamicResource TextBoxSelectionColor}" />
				<Setter
					Property="FontFamily"
					Value="{DynamicResource TextBoxFontFamily}" />
				<Setter
					Property="FontSize"
					Value="{DynamicResource TextBoxFontSize}" />
				<Setter
					Property="FrameworkElement.FocusVisualStyle"
					Value="{x:Null}" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type TextBox}">
							<Border
								Name="border"
								BorderBrush="{DynamicResource TextBoxOuterBorderColor}"
								BorderThickness="{DynamicResource TextBoxOuterBorderThickness}"
								Background="{DynamicResource TextBoxBackgroundColor}"
								SnapsToDevicePixels="True"
								CornerRadius="{DynamicResource TextBoxCornerRadius}">
								<Border
									BorderBrush="{DynamicResource TextBoxInnerBorderColor}"
									BorderThickness="{DynamicResource TextBoxInnerBorderThickness}"
									Background="{DynamicResource TextBoxBackgroundColor}"
									SnapsToDevicePixels="True"
									CornerRadius="{DynamicResource TextBoxCornerRadius}">
									<ScrollViewer
										Name="PART_ContentHost"
										Focusable="False"
										Margin="{TemplateBinding Padding}"
										HorizontalScrollBarVisibility="Hidden"
										VerticalScrollBarVisibility="Hidden" />
								</Border>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<ControlTemplate
				TargetType="{x:Type ToggleButton}"
				x:Key="ComboBoxToggleButtonTemplate">
				<Grid
					Cursor="{DynamicResource ComboBoxToggleButtonCursor}">
					<Grid.ColumnDefinitions>
						<ColumnDefinition />
						<ColumnDefinition
							Width="20" />
					</Grid.ColumnDefinitions>
					<Border
						Name="Border"
						Grid.ColumnSpan="2"
						BorderBrush="{DynamicResource ComboBoxToggleButtonOuterBorderColor}"
						BorderThickness="{DynamicResource ComboBoxToggleButtonOuterBorderThickness}"
						Background="{DynamicResource ComboBoxToggleButtonBackgroundColor}"
						CornerRadius="{DynamicResource ComboBoxToggleButtonCornerRadius}"
						SnapsToDevicePixels="True">
						<Border
							Name="InnerBorder"
							BorderBrush="{DynamicResource ComboBoxToggleButtonInnerBorderColor}"
							BorderThickness="{DynamicResource ComboBoxToggleButtonInnerBorderThickness}"
							Background="{DynamicResource ComboBoxToggleButtonBackgroundColor}"
							CornerRadius="{DynamicResource ComboBoxToggleButtonCornerRadius}" />
					</Border>
					<Border
						Name="ButtonBorder"
						Grid.Column="1"
						Margin="1"
						BorderBrush="#00FFFFFF"
						CornerRadius="{DynamicResource ComboBoxToggleButtonDropDownCornerRadius}"
						BorderThickness="0"
						Background="#00FFFFFF" />
					<Path
						Name="Arrow"
						Grid.Column="1"
						Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4"
						Fill="{DynamicResource ComboBoxToggleButtonDropDownPenColor}"
						HorizontalAlignment="Center"
						VerticalAlignment="Center"
						RenderTransformOrigin="0.5,0.5" />
				</Grid>
				<ControlTemplate.Triggers>
					<Trigger
						Property="UIElement.IsMouseOver"
						Value="True">
						<Setter
							Value="{DynamicResource ComboBoxToggleButtonDropDownPenHoverColor}"
							TargetName="Arrow"
							Property="Fill" />
					</Trigger>
					<Trigger
						Property="ToggleButton.IsChecked"
						Value="True">
						<Setter
							TargetName="Arrow"
							Property="RenderTransform">
							<Setter.Value>
								<RotateTransform
									Angle="180" />
							</Setter.Value>
						</Setter>
						<Setter
							TargetName="Border"
							Value="{DynamicResource ComboBoxToggleButtonOuterBorderPressedColor}"
							Property="BorderBrush" />
						<Setter
							TargetName="Border"
							Value="{DynamicResource ComboBoxToggleButtonBackgroundPressedColor}"
							Property="Background" />
						<Setter
							TargetName="InnerBorder"
							Value="{DynamicResource ComboBoxToggleButtonInnerBorderPressedColor}"
							Property="BorderBrush" />
						<Setter
							TargetName="InnerBorder"
							Value="{DynamicResource ComboBoxToggleButtonBackgroundPressedColor}"
							Property="Background" />
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
			<Style
				TargetType="{x:Type ComboBox}"
				x:Key="{x:Type ComboBox}">
				<Setter
					Property="UIElement.SnapsToDevicePixels"
					Value="True" />
				<Setter
					Property="FrameworkElement.OverridesDefaultStyle"
					Value="True" />
				<Setter
					Property="HorizontalScrollBarVisibility"
					Value="Auto" />
				<Setter
					Property="VerticalScrollBarVisibility"
					Value="Auto" />
				<Setter
					Property="CanContentScroll"
					Value="True" />
				<Setter
					Property="Foreground"
					Value="{DynamicResource ComboBoxForegroundColor}" />
				<Setter
					Property="FrameworkElement.FocusVisualStyle"
					Value="{x:Null}" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type ComboBox}">
							<Grid>
								<ToggleButton
									Name="ToggleButton"
									ClickMode="Press"
									Focusable="False"
									Template="{StaticResource ComboBoxToggleButtonTemplate}"
									IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
								<ContentPresenter
									Name="ContentSite"
									Margin="5,3,23,3"
									IsHitTestVisible="False"
									HorizontalAlignment="Left"
									VerticalAlignment="Center"
									Content="{TemplateBinding SelectionBoxItem}"
									ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
									ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />
								<TextBox
									Name="PART_EditableTextBox"
									Margin="3,3,23,3"
									IsReadOnly="{TemplateBinding IsReadOnly}"
									Visibility="Hidden"
									Background="#00FFFFFF"
									HorizontalAlignment="Left"
									VerticalAlignment="Center"
									Focusable="True">
									<Control.Template>
										<ControlTemplate
											TargetType="{x:Type TextBox}">
											<Border
												Name="PART_ContentHost"
												Focusable="False" />
										</ControlTemplate>
									</Control.Template>
								</TextBox>
								<Popup
									Name="Popup"
									Placement="Bottom"
									Focusable="False"
									AllowsTransparency="True"
									IsOpen="{TemplateBinding IsDropDownOpen}"
									PopupAnimation="Slide">
									<Grid
										Name="DropDown"
										SnapsToDevicePixels="True"
										MinWidth="{TemplateBinding ActualWidth}"
										MaxHeight="{TemplateBinding MaxDropDownHeight}">
										<Border
											Name="DropDownBorder"
											BorderBrush="{DynamicResource ComboBoxPopupOuterBorderColor}"
											Margin="0,1,0,0"
											CornerRadius="{DynamicResource ComboBoxPopupCornerRadius}"
											BorderThickness="{DynamicResource ComboBoxPopupOuterBorderThickness}"
											Background="{DynamicResource ComboBoxPopupBackgroundColor}"
											SnapsToDevicePixels="True">
											<Border
												BorderBrush="{DynamicResource ComboBoxPopupInnerBorderColor}"
												BorderThickness="{DynamicResource ComboBoxPopupInnerBorderThickness}"
												Background="{DynamicResource ComboBoxPopupBackgroundColor}"
												CornerRadius="{DynamicResource ComboBoxPopupCornerRadius}" />
										</Border>
										<ScrollViewer
											Margin="4"
											SnapsToDevicePixels="True">
											<ItemsPresenter
												KeyboardNavigation.DirectionalNavigation="Contained" />
										</ScrollViewer>
									</Grid>
								</Popup>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger
									Property="ItemsControl.HasItems"
									Value="False">
									<Setter
										TargetName="DropDownBorder"
										Property="MinHeight"
										Value="95" />
								</Trigger>
								<Trigger
									Property="ItemsControl.IsGrouping"
									Value="True">
									<Setter
										Property="CanContentScroll"
										Value="False" />
								</Trigger>
								<Trigger
									Property="ComboBox.IsEditable"
									Value="True">
									<Setter
										Property="KeyboardNavigation.IsTabStop"
										Value="False" />
									<Setter
										TargetName="PART_EditableTextBox"
										Property="Visibility"
										Value="Visible" />
									<Setter
										TargetName="ContentSite"
										Property="Visibility"
										Value="Hidden" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type ContextMenu}"
				x:Key="{x:Type ContextMenu}">
				<Setter
					Property="Foreground"
					Value="{DynamicResource ContextMenuForegroundColor}" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type ContextMenu}">
							<Border
								Name="Border"
								Background="{DynamicResource ContextMenuBackgroundColor}"
								BorderThickness="1"
								BorderBrush="{DynamicResource ContextMenuBorderColor}">
								<StackPanel
									IsItemsHost="True"
									KeyboardNavigation.DirectionalNavigation="Cycle" />
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type Separator}"
				x:Key="{x:Static MenuItem.SeparatorStyleKey}">
				<Setter
					Property="Focusable"
					Value="False" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type Separator}">
							<Grid
								Margin="6">
								<Grid.RowDefinitions>
									<RowDefinition />
									<RowDefinition />
								</Grid.RowDefinitions>
								<Border
									Grid.Row="0"
									BorderBrush="{DynamicResource ContextMenuSeparatorTopColor}"
									BorderThickness="{DynamicResource ContextMenuSeparatorTopThickness}"
									Background="#00FFFFFF"
									Height="1"
									SnapsToDevicePixels="True"
									UseLayoutRounding="True" />
								<Border
									Grid.Row="1"
									BorderBrush="{DynamicResource ContextMenuSeparatorBottomColor}"
									BorderThickness="{DynamicResource ContextMenuSeparatorBottomThickness}"
									Background="#00FFFFFF"
									Height="1"
									SnapsToDevicePixels="True"
									UseLayoutRounding="True" />
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type MenuItem}"
				x:Key="{x:Type MenuItem}">
				<Setter
					Property="Foreground"
					Value="{DynamicResource ContextMenuForegroundColor}" />
				<Setter
					Property="Background"
					Value="#00FFFFFF" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type MenuItem}">
							<Grid
								Background="{TemplateBinding Background}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition />
									<ColumnDefinition
										Width="Auto" />
								</Grid.ColumnDefinitions>
								<ContentPresenter
									Grid.Column="0"
									ContentSource="Header"
									RecognizesAccessKey="True"
									Margin="12,4" />
								<Path
									Name="Path"
									Grid.Column="1"
									Data="M0,0 L0,2 L2,4 L0,6 L0,8 L4,4"
									Fill="{DynamicResource ContextMenuItemSubItemArrowColor}"
									VerticalAlignment="Center"
									Margin="10"
									Visibility="Collapsed" />
								<Popup
									Name="PART_Popup"
									Grid.Column="0"
									Placement="Right"
									Focusable="False"
									IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
									<Border
										Background="{DynamicResource ContextMenuBackgroundColor}"
										BorderThickness="1"
										BorderBrush="{DynamicResource ContextMenuBorderColor}">
										<ItemsPresenter
											Name="ItemsPresenter"
											KeyboardNavigation.TabNavigation="Cycle"
											KeyboardNavigation.DirectionalNavigation="Cycle" />
									</Border>
								</Popup>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger
									Property="MenuItem.IsHighlighted"
									Value="True">
									<Setter
										Value="{DynamicResource ContextMenuBackgroundHoverColor}"
										Property="Background" />
								</Trigger>
								<Trigger
									Property="ItemsControl.HasItems"
									Value="True">
									<Setter
										TargetName="Path"
										Property="Visibility"
										Value="Visible" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type Thumb}"
				x:Key="ScrollBarTrackThumb">
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type Thumb}">
							<Grid
								Name="Grid">
								<Rectangle
									HorizontalAlignment="Stretch"
									VerticalAlignment="Stretch"
									Width="Auto"
									Height="Auto"
									Fill="#00FFFFFF" />
								<Border
									Name="CornerScrollBarRectangle"
									CornerRadius="{DynamicResource ScrollBarThumbCornerRadius}"
									HorizontalAlignment="Stretch"
									VerticalAlignment="Stretch"
									Width="{DynamicResource ScrollBarThumbSize}"
									Height="Auto"
									Margin="0,1,0,1"
									Background="{TemplateBinding Background}" />
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger
									Property="FrameworkElement.Tag"
									Value="Horizontal">
									<Setter
										TargetName="CornerScrollBarRectangle"
										Property="Margin"
										Value="1,0,1,0" />
									<Setter
										TargetName="CornerScrollBarRectangle"
										Property="Width"
										Value="Auto" />
									<Setter
										TargetName="CornerScrollBarRectangle"
										Value="{DynamicResource ScrollBarThumbSize}"
										Property="Height" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type ScrollBar}"
				x:Key="{x:Type ScrollBar}">
				<Setter
					Property="Stylus.IsFlicksEnabled"
					Value="False" />
				<Setter
					Property="Foreground"
					Value="{DynamicResource ScrollBarThumbColor}" />
				<Setter
					Property="Background"
					Value="{DynamicResource ScrollBarTrackColor}" />
				<Setter
					Property="Width"
					Value="{DynamicResource ScrollBarThumbSize}" />
				<Setter
					Property="MinWidth"
					Value="{DynamicResource ScrollBarThumbSize}" />
				<Setter
					Property="MaxWidth"
					Value="{DynamicResource ScrollBarThumbSize}" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type ScrollBar}">
							<Grid
								Name="GridRoot"
								Width="{DynamicResource ScrollBarThumbSize}"
								Background="{TemplateBinding Background}">
								<Grid.RowDefinitions>
									<RowDefinition
										Height="0.00001*" />
								</Grid.RowDefinitions>
								<Track
									Name="PART_Track"
									Grid.Row="0"
									IsDirectionReversed="True"
									Focusable="False">
									<Track.Thumb>
										<Thumb
											Name="Thumb"
											Background="{TemplateBinding Foreground}"
											Style="{StaticResource ScrollBarTrackThumb}" />
									</Track.Thumb>
									<Track.IncreaseRepeatButton>
										<RepeatButton
											Name="PageUp"
											Command="ScrollBar.PageDownCommand"
											Opacity="0"
											Focusable="False" />
									</Track.IncreaseRepeatButton>
									<Track.DecreaseRepeatButton>
										<RepeatButton
											Name="PageDown"
											Command="ScrollBar.PageUpCommand"
											Opacity="0"
											Focusable="False" />
									</Track.DecreaseRepeatButton>
								</Track>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger
									SourceName="Thumb"
									Property="UIElement.IsMouseOver"
									Value="True">
									<Setter
										Value="{DynamicResource ScrollBarThumbHoverColor}"
										TargetName="Thumb"
										Property="Background" />
								</Trigger>
								<Trigger
									SourceName="Thumb"
									Property="Thumb.IsDragging"
									Value="True">
									<Setter
										Value="{DynamicResource ScrollBarThumbPressedColor}"
										TargetName="Thumb"
										Property="Background" />
								</Trigger>
								<Trigger
									Property="IsEnabled"
									Value="False">
									<Setter
										TargetName="Thumb"
										Property="Visibility"
										Value="Collapsed" />
								</Trigger>
								<Trigger
									Property="ScrollBar.Orientation"
									Value="Horizontal">
									<Setter
										TargetName="GridRoot"
										Property="FrameworkElement.LayoutTransform">
										<Setter.Value>
											<RotateTransform
												Angle="-90" />
										</Setter.Value>
									</Setter>
									<Setter
										TargetName="PART_Track"
										Property="FrameworkElement.LayoutTransform">
										<Setter.Value>
											<RotateTransform
												Angle="-90" />
										</Setter.Value>
									</Setter>
									<Setter
										Property="Width"
										Value="Auto" />
									<Setter
										Value="{x:Static system:Double.PositiveInfinity}"
										Property="MaxWidth" />
									<Setter
										Value="{DynamicResource ScrollBarThumbSize}"
										Property="Height" />
									<Setter
										Value="{DynamicResource ScrollBarThumbSize}"
										Property="MinHeight" />
									<Setter
										Value="{DynamicResource ScrollBarThumbSize}"
										Property="MaxHeight" />
									<Setter
										TargetName="Thumb"
										Property="FrameworkElement.Tag"
										Value="Horizontal" />
									<Setter
										TargetName="PageDown"
										Property="Command"
										Value="ScrollBar.PageLeftCommand" />
									<Setter
										TargetName="PageUp"
										Property="Command"
										Value="ScrollBar.PageRightCommand" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type ScrollViewer}"
				x:Key="{x:Type ScrollViewer}">
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type ScrollViewer}">
							<Grid
								Name="Grid"
								Background="{TemplateBinding Background}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition
										Width="*" />
									<ColumnDefinition
										Width="Auto" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition
										Height="*" />
									<RowDefinition
										Height="Auto" />
								</Grid.RowDefinitions>
								<Rectangle
									Name="Corner"
									Grid.Column="1"
									Fill="#00FFFFFF"
									Grid.Row="1" />
								<ScrollContentPresenter
									Name="PART_ScrollContentPresenter"
									CanContentScroll="{TemplateBinding CanContentScroll}"
									CanHorizontallyScroll="False"
									CanVerticallyScroll="False"
									ContentTemplate="{TemplateBinding ContentTemplate}"
									Content="{TemplateBinding Content}"
									Grid.Column="0"
									Margin="{TemplateBinding Padding}"
									Grid.Row="0" />
								<ScrollBar
									Name="PART_VerticalScrollBar"
									AutomationProperties.AutomationId="VerticalScrollBar"
									Cursor="Arrow"
									Grid.Column="1"
									Maximum="{TemplateBinding ScrollableHeight}"
									Minimum="0"
									Grid.Row="0"
									Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
									ViewportSize="{TemplateBinding ViewportHeight}"
									Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
								<ScrollBar
									Name="PART_HorizontalScrollBar"
									AutomationProperties.AutomationId="HorizontalScrollBar"
									Cursor="Arrow"
									Grid.Column="0"
									Maximum="{TemplateBinding ScrollableWidth}"
									Minimum="0"
									Orientation="Horizontal"
									Grid.Row="1"
									Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
									ViewportSize="{TemplateBinding ViewportWidth}"
									Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type local:HeaderScrollViewer}"
				x:Key="{x:Type local:HeaderScrollViewer}">
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type local:HeaderScrollViewer}">
							<Grid
								Name="Grid">
								<Grid.ColumnDefinitions>
									<ColumnDefinition
										Width="Auto" />
									<ColumnDefinition
										Width="*" />
									<ColumnDefinition
										Width="Auto" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition
										Height="*" />
									<RowDefinition
										Height="Auto" />
								</Grid.RowDefinitions>
								<Rectangle
									Grid.Row="1"
									Grid.Column="2"
									Fill="#00FFFFFF" />
								<ScrollContentPresenter
									Name="PART_ScrollContentPresenter"
									Grid.Row="0"
									Grid.Column="1"
									CanContentScroll="{TemplateBinding CanContentScroll}"
									Margin="{TemplateBinding Padding}"
									CanHorizontallyScroll="False"
									CanVerticallyScroll="False"
									ContentTemplate="{TemplateBinding ContentTemplate}"
									Content="{TemplateBinding Content}" />
								<ContentPresenter
									Grid.Row="0"
									Grid.Column="0"
									Content="{TemplateBinding local:Header}" />
								<ScrollBar
									Name="PART_VerticalScrollBar"
									Grid.Row="0"
									Grid.Column="2"
									AutomationProperties.AutomationId="VerticalScrollBar"
									Cursor="Arrow"
									Maximum="{TemplateBinding ScrollableHeight}"
									Minimum="0"
									Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
									ViewportSize="{TemplateBinding ViewportHeight}"
									Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
								<ScrollBar
									Name="PART_HorizontalScrollBar"
									Grid.Row="1"
									Grid.Column="0"
									Grid.ColumnSpan="2"
									AutomationProperties.AutomationId="HorizontalScrollBar"
									Cursor="Arrow"
									Maximum="{TemplateBinding ScrollableWidth}"
									Minimum="0"
									Orientation="Horizontal"
									Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
									ViewportSize="{TemplateBinding ViewportWidth}"
									Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		</ResourceDictionary>
	</Application.Resources>
</Application>
